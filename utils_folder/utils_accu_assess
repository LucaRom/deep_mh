import rasterio
import torch
import matplotlib.pyplot as plt
import numpy as np
from torchmetrics import ConfusionMatrix
from sklearn.metrics import ConfusionMatrixDisplay, classification_report


############################
# Accu assess    #
############################

# Predictions
# Predictions portneuf NORD clipped
#pred_path = "/mnt/d/00_Donnees/02_maitrise/01_trainings/portneuf_zone1/region_preds_portneuf_nord_no_NDVI_no_overlap_model_m27_estrie.tif"

# pred path no post-process
pred_path = 'results/inference/estrie_m27_z04_v03_arg.tif'

# # path sieved 335
#pred_path = '/mnt/SN750/01_Code_nvme/Unet_lightning/results/inference/estrie_m27_z04_v03_arg_sieved.tif'

# # path post-processed
#pred_path = 'results/inference/estrie_m27_z04_v03_arg_mod_TB_BG.tif'

# Masks
# Mask clipped portneuf nord 3223
#mask_path = "/mnt/d/00_Donnees/02_maitrise/01_trainings/portneuf_zone1/clipped_mask_portneuf_nord.tif"

# Mask 3223
mask_path = '/mnt/d/00_Donnees/02_maitrise/01_trainings/estrie/full_image_zone_test/v_04/estrie_mask_multiclass_3223_v04.tif'

# Mask 3223 + 15m buffer
#mask_path = '/mnt/Data/00_Donnees/02_maitrise/01_trainings/estrie/full_image_zone_test/v_04/mask_estrie_32_buffer15_z04.tif'

# Mask ori
#mask_path = '/mnt/d/00_Donnees/02_maitrise/01_trainings/estrie/full_image_zone_test/v_04/mask_estrie_multiclass_ori_v04.tif'

# Mask ori TEST AVEC CLASSE NEGATIVE
#mask_path = '/home/luca/tesT_me_more.tif'

load_pred = rasterio.open(pred_path)
load_mask = rasterio.open(mask_path)

device = torch.device("cuda:0") if torch.cuda.is_available() else torch.device("cpu")

read_pred = load_pred.read().squeeze()
read_pred = torch.tensor(read_pred).type(torch.IntTensor)
read_mask = torch.tensor(load_mask.read()).squeeze().type(torch.IntTensor)


confmat = ConfusionMatrix(task='multiclass', num_classes=9, normalize='true') #.to(device=device)
conf_print = confmat(read_pred, read_mask)

# value for m_v27 3223 mask
conf_print_v27 = torch.tensor([
    [0.48, 0.00, 0.00, 0.01, 0.00, 0.08, 0.00, 0.07, 0.36],
    [0.02, 0.23, 0.01, 0.03, 0.00, 0.53, 0.01, 0.17, 0.00],
    [0.00, 0.00, 0.08, 0.11, 0.00, 0.10, 0.01, 0.70, 0.00],
    [0.00, 0.00, 0.00, 0.23, 0.00, 0.03, 0.15, 0.59, 0.00],
    [0.00, 0.00, 0.00, 0.00, 0.43, 0.01, 0.56, 0.00, 0.00],
    [0.01, 0.00, 0.00, 0.15, 0.00, 0.57, 0.14, 0.13, 0.00],
    [0.00, 0.00, 0.00, 0.07, 0.00, 0.03, 0.63, 0.27, 0.00],
    [0.00, 0.00, 0.00, 0.02, 0.00, 0.00, 0.01, 0.97, 0.00],
    [0.04, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.03, 0.93],
])

# value for m_v27 3223 mask + buffer
conf_print_v27_buff = torch.tensor([
    [0.66, 0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.00, 0.33],
    [0.01, 0.33, 0.00, 0.01, 0.00, 0.65, 0.00, 0.01, 0.00],
    [0.00, 0.00, 0.06, 0.09, 0.00, 0.17, 0.02, 0.66, 0.00],
    [0.00, 0.00, 0.00, 0.24, 0.00, 0.04, 0.21, 0.51, 0.00],
    [0.00, 0.00, 0.00, 0.00, 0.50, 0.00, 0.50, 0.00, 0.00],
    [0.01, 0.00, 0.00, 0.12, 0.00, 0.69, 0.11, 0.06, 0.00],
    [0.00, 0.00, 0.00, 0.06, 0.00, 0.02, 0.71, 0.21, 0.00],
    [0.00, 0.00, 0.00, 0.03, 0.00, 0.01, 0.04, 0.91, 0.00],
    [0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.95],
])
   
# value for m_v222 3223 mask
conf_print_v222 = torch.tensor([
    [0.53, 0.00, 0.00, 0.02, 0.00, 0.08, 0.00, 0.05, 0.32],
    [0.01, 0.25, 0.04, 0.11, 0.00, 0.49, 0.01, 0.10, 0.00],
    [0.00, 0.00, 0.23, 0.21, 0.00, 0.06, 0.00, 0.50, 0.00],
    [0.00, 0.00, 0.00, 0.37, 0.00, 0.02, 0.10, 0.51, 0.00],
    [0.00, 0.00, 0.00, 0.01, 0.46, 0.02, 0.47, 0.04, 0.00],
    [0.01, 0.00, 0.00, 0.24, 0.00, 0.54, 0.12, 0.08, 0.00],
    [0.00, 0.00, 0.00, 0.15, 0.00, 0.03, 0.56, 0.26, 0.00],
    [0.00, 0.00, 0.00, 0.03, 0.00, 0.00, 0.01, 0.96, 0.00],
    [0.05, 0.00, 0.00, 0.01, 0.00, 0.00, 0.00, 0.03, 0.92],
])


# value for m_v222 3223 + buff mask
conf_print_v222_buff = torch.tensor([
    [0.74, 0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.00, 0.25],
    [0.00, 0.33, 0.03, 0.03, 0.00, 0.57, 0.00, 0.03, 0.00],
    [0.00, 0.00, 0.24, 0.17, 0.00, 0.13, 0.00, 0.46, 0.00],
    [0.00, 0.00, 0.00, 0.39, 0.00, 0.03, 0.14, 0.45, 0.00],
    [0.00, 0.00, 0.00, 0.01, 0.54, 0.00, 0.41, 0.03, 0.00],
    [0.00, 0.00, 0.00, 0.18, 0.00, 0.68, 0.09, 0.03, 0.00],
    [0.00, 0.00, 0.00, 0.12, 0.00, 0.02, 0.65, 0.21, 0.00],
    [0.00, 0.00, 0.00, 0.07, 0.00, 0.01, 0.03, 0.89, 0.00],
    [0.06, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.94],
])

# value for m_v30 stack 3223 + buff mask
conf_print_v222_buff = torch.tensor([
    [0.76, 0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.00, 0.23],
    [0.00, 0.42, 0.01, 0.05, 0.00, 0.49, 0.00, 0.02, 0.00],
    [0.00, 0.00, 0.17, 0.07, 0.00, 0.14, 0.00, 0.62, 0.00],
    [0.00, 0.00, 0.00, 0.36, 0.00, 0.04, 0.10, 0.50, 0.00],
    [0.00, 0.00, 0.00, 0.00, 0.52, 0.01, 0.44, 0.03, 0.00],
    [0.01, 0.00, 0.00, 0.13, 0.00, 0.76, 0.06, 0.03, 0.00],
    [0.00, 0.00, 0.00, 0.12, 0.00, 0.04, 0.58, 0.26, 0.00],
    [0.00, 0.00, 0.00, 0.05, 0.00, 0.02, 0.02, 0.91, 0.00],
    [0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.90],
])

#class_labels = ['0 (EP)','1 (MS)','2 (PH)','3 (ME)','4 (BG)','5 (FN)','6 (TB)', '7 (NH)', '8 (SH)']
class_labels = ['EP','MS','PH','ME','BG','FN','TB', 'NH', 'SH']

## Tableau CM normé sur true

#fig = plt.figure()
fig, ax = plt.subplots(figsize=(6, 6)) # ax is necessary to make large number fit in the output img
#cm = conf_print.detach().cpu().numpy()
cm = conf_print_v222_buff.detach().cpu().numpy()
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)
#disp = ConfusionMatrixDisplay(confusion_matrix=cm)
#disp.plot(values_format = '.0f', ax=ax)
disp.plot(values_format = '.2f', ax=ax)
#plt.show()
#plt.savefig('results/inference/v27_z04_arg_raw_cm_norm')
# plt.clf() 
# plt.close(fig)

## Tableau CM normé sur pred

# confmat_pred = ConfusionMatrix(num_classes=9, normalize='pred') #.to(device=device)
# conf_print_pred = confmat_pred(read_pred, read_mask)

# #fig = plt.figure()
# fig, ax = plt.subplots(figsize=(10, 10)) # ax is necessary to make large number fit in the output img
# cm2 = conf_print_pred.detach().cpu().numpy()
# disp2 = ConfusionMatrixDisplay(confusion_matrix=cm2, display_labels=class_labels)
# #disp = ConfusionMatrixDisplay(confusion_matrix=cm)
# #disp.plot(values_format = '.0f', ax=ax)
# disp2.plot(values_format = '.2f', ax=ax)
# #plt.show()


## Tableau CM avec nombre pixel

# conf_print_pixels = ConfusionMatrix(num_classes=9) #.to(device=device)
# conf_print_pixels = conf_print_pixels(read_pred, read_mask)

# #fig = plt.figure()
# fig, ax = plt.subplots(figsize=(10, 10)) # ax is necessary to make large number fit in the output img
# cm3 = conf_print_pixels.detach().cpu().numpy()
# disp3 = ConfusionMatrixDisplay(confusion_matrix=cm3, display_labels=class_labels)
# #disp = ConfusionMatrixDisplay(confusion_matrix=cm)
# #disp.plot(values_format = '.0f', ax=ax)
# disp3.plot(values_format = '.2f', ax=ax)


plt.show()


# import os

# cr = classification_report(y_true=read_mask.flatten(), y_pred=read_pred.flatten(), target_names=class_labels)
# print(cr)
# cr_save_path = os.path.join('results/inference', 'class_v27_z04_arg_raw.out')
# with open(cr_save_path, 'w') as f:
#     f.write(cr)